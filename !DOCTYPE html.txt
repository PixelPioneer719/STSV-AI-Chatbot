<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>STSV Chatbot</title>
    <!-- Tailwind CSS CDN -->
    <script src="https://cdn.tailwindcss.com"></script>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
    <style>
        /* Custom scrollbar for a professional look */
        ::-webkit-scrollbar {
            width: 8px;
        }
        ::-webkit-scrollbar-track {
            background: #2d2d2d; /* Darker track for dark theme */
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb {
            background: #555;
            border-radius: 10px;
        }
        ::-webkit-scrollbar-thumb:hover {
            background: #777;
        }

        body {
            font-family: 'Inter', sans-serif;
            background-color: #1a1a1a; /* Dark background */
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            padding: 0; /* Remove padding for full screen effect */
            box-sizing: border-box;
            color: #e0e0e0; /* Light text color */
        }

        #app-container {
            display: flex;
            width: 100vw; /* Full viewport width */
            height: 100vh; /* Full viewport height */
            background-color: #1a1a1a; /* Main app background */
        }

        .sidebar {
            width: 250px; /* Fixed width for sidebar */
            background-color: #212121; /* Darker sidebar background */
            padding: 1rem;
            display: flex;
            flex-direction: column;
            border-right: 1px solid #333; /* Subtle separator */
            box-shadow: 2px 0 5px rgba(0, 0, 0, 0.2);
        }

        .sidebar-header {
            display: flex;
            align-items: center;
            padding-bottom: 1rem;
            margin-bottom: 1rem;
            border-bottom: 1px solid #333;
            color: #ffffff;
            font-size: 1.25rem;
            font-weight: 600;
        }

        .sidebar-header svg {
            margin-right: 0.75rem;
        }

        .sidebar-nav-item {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            border-radius: 0.5rem;
            color: #b0b0b0;
            font-size: 0.95rem;
            cursor: pointer;
            transition: background-color 0.2s, color 0.2s;
            margin-bottom: 0.5rem;
        }

        .sidebar-nav-item:hover {
            background-color: #333;
            color: #ffffff;
        }

        .sidebar-nav-item svg {
            margin-right: 0.75rem;
        }

        .sidebar-bottom {
            margin-top: auto; /* Pushes items to the bottom */
            padding-top: 1rem;
            border-top: 1px solid #333;
        }

        .chat-main-content {
            flex-grow: 1;
            display: flex;
            flex-direction: column;
            background-color: #242424; /* Main chat background */
        }

        .chat-header-main {
            background-color: #2b2b2b; /* Header background */
            color: #ffffff;
            padding: 0.75rem 1.5rem;
            font-size: 1.1rem;
            font-weight: 600;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #333;
        }

        .chat-header-main .upgrade-button {
            background-color: #4a4a4a;
            color: #ffffff;
            padding: 0.4rem 0.8rem;
            border-radius: 9999px; /* Fully rounded */
            font-size: 0.8rem;
            font-weight: 500;
            cursor: pointer;
            transition: background-color 0.2s;
        }

        .chat-header-main .upgrade-button:hover {
            background-color: #5a5a5a;
        }

        .chat-messages {
            flex-grow: 1;
            padding: 2rem 1.5rem;
            overflow-y: auto;
            display: flex;
            flex-direction: column;
            gap: 1rem;
            scroll-behavior: smooth;
            justify-content: flex-end; /* Align content to bottom */
        }

        .welcome-message {
            text-align: center;
            color: #88aaff; /* A pleasant blue for the greeting */
            font-size: 2.5rem;
            font-weight: 500;
            margin-bottom: 2rem;
            flex-grow: 1; /* Pushes it to the center vertically */
            display: flex;
            align-items: center;
            justify-content: center;
        }

        .message {
            max-width: 70%; /* Adjusted max-width */
            padding: 0.75rem 1rem;
            border-radius: 0.75rem; /* Slightly less rounded for a sleek look */
            word-wrap: break-word;
            line-height: 1.4;
            box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);
            transition: transform 0.2s ease-out;
        }
        .message:hover {
            transform: translateY(-2px);
        }
        .user-message {
            align-self: flex-end;
            background-color: #3a3a3a; /* Darker gray for user messages */
            color: #ffffff;
            border-bottom-right-radius: 0.25rem;
        }
        .ai-message {
            align-self: flex-start;
            background-color: #2d2d2d; /* Slightly lighter dark for AI messages */
            color: #e0e0e0;
            border-bottom-left-radius: 0.25rem;
        }
        .chat-input-area {
            display: flex;
            justify-content: center; /* Center the input box */
            padding: 1.5rem;
            background-color: #242424; /* Same as main chat background */
        }
        .input-wrapper {
            width: 100%;
            max-width: 700px; /* Max width for input similar to image */
            display: flex;
            align-items: center;
            background-color: #333333; /* Darker input background */
            border-radius: 1.5rem; /* More rounded input box */
            padding: 0.5rem 1rem;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
            border: 1px solid #444; /* Subtle border */
            position: relative; /* For icons positioning */
        }
        .chat-input {
            flex-grow: 1;
            padding: 0.75rem 0.5rem;
            border: none;
            background-color: transparent;
            font-size: 1rem;
            outline: none;
            color: #e0e0e0;
            padding-right: 3rem; /* Space for send button/icon */
        }
        .chat-input::placeholder {
            color: #888;
        }
        .send-button {
            background-color: transparent;
            border: none;
            color: #88aaff; /* Blue for send icon */
            font-size: 1.5rem;
            cursor: pointer;
            padding: 0.5rem;
            border-radius: 50%;
            transition: background-color 0.2s, transform 0.1s;
            display: flex;
            align-items: center;
            justify-content: center;
            position: absolute;
            right: 0.5rem; /* Position to the right */
        }
        .send-button:hover {
            background-color: #444;
        }
        .send-button:active {
            transform: scale(0.95);
        }
        .send-button:disabled {
            color: #666;
            cursor: not-allowed;
            background-color: transparent;
        }
        .loading-indicator {
            align-self: flex-start;
            background-color: #444; /* Darker loading indicator */
            color: #b0b0b0;
            padding: 0.75rem 1rem;
            border-radius: 0.75rem;
            border-bottom-left-radius: 0.25rem;
            animation: pulse 1.5s infinite ease-in-out;
            font-style: italic;
        }

        /* Responsive adjustments */
        @media (max-width: 768px) {
            .sidebar {
                width: 0; /* Hide sidebar on small screens */
                overflow: hidden;
                padding: 0;
            }
            #app-container {
                flex-direction: column; /* Stack on small screens */
            }
            .chat-main-content {
                width: 100%;
            }
            .welcome-message {
                font-size: 1.8rem;
                padding: 0 1rem;
            }
            .chat-messages {
                padding: 1rem;
            }
            .message {
                max-width: 95%; /* Wider messages on small screens */
            }
            .chat-input-area {
                padding: 1rem;
            }
            .input-wrapper {
                max-width: 95%;
                padding: 0.3rem 0.75rem;
            }
            .chat-input {
                padding: 0.5rem 0.5rem;
                padding-right: 2.5rem;
            }
            .send-button {
                font-size: 1.2rem;
                right: 0.25rem;
                padding: 0.3rem;
            }
        }
    </style>
</head>
<body>
    <div id="app-container">
        <!-- Sidebar -->
        <div class="sidebar">
            <div class="sidebar-header">
                <!-- Removed Hamburger icon -->
                STSV
                <!-- Model selector placeholder -->
                <div class="ml-auto text-sm text-gray-400">2.0 Flash</div>
            </div>
            <!-- Removed New chat item -->

            <div class="sidebar-bottom">
                <!-- Removed Settings and help item -->
            </div>
        </div>

        <!-- Main Chat Content -->
        <div class="chat-main-content">
            <div class="chat-header-main">
                <div class="flex items-center">
                    STSV
                </div>
                <!-- Removed Upgrade button -->
            </div>
            <div class="chat-messages" id="chatMessages">
                <div class="welcome-message" id="welcomeMessage">Hello</div>
                <!-- Messages will be appended here -->
            </div>
            <div class="chat-input-area">
                <div class="input-wrapper">
                    <input type="text" id="chatInput" class="chat-input" placeholder="Ask STSV...">
                    <button id="sendButton" class="send-button">
                        <svg xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" class="lucide lucide-send"><path d="m22 2-7 20-4-9-9-4 20-7Z"/><path d="M22 2 11 13"/></svg>
                    </button>
                </div>
            </div>
        </div>
    </div>

    <script>
        const chatInput = document.getElementById('chatInput');
        const sendButton = document.getElementById('sendButton');
        const chatMessages = document.getElementById('chatMessages');
        const welcomeMessage = document.getElementById('welcomeMessage');

        // Initialize Firebase variables (not used in this specific example but kept for context)
        let app;
        let db;
        let auth;
        let userId;

        // Function to scroll chat to the bottom
        function scrollToBottom() {
            chatMessages.scrollTop = chatMessages.scrollHeight;
        }

        // Function to add a message to the chat display
        function addMessage(text, sender) {
            // Remove welcome message once chat starts
            if (welcomeMessage) {
                welcomeMessage.remove();
            }

            const messageDiv = document.createElement('div');
            messageDiv.classList.add('message');
            if (sender === 'user') {
                messageDiv.classList.add('user-message');
            } else {
                messageDiv.classList.add('ai-message');
            }
            messageDiv.textContent = text;
            chatMessages.appendChild(messageDiv);
            scrollToBottom();
        }

        // Function to show a loading indicator
        function showLoading() {
            // Remove welcome message if still present before showing loading
            if (welcomeMessage) {
                welcomeMessage.remove();
            }

            const loadingDiv = document.createElement('div');
            loadingDiv.classList.add('message', 'loading-indicator');
            loadingDiv.id = 'loadingIndicator';
            loadingDiv.textContent = 'Typing...';
            chatMessages.appendChild(loadingDiv);
            scrollToBottom();
        }

        // Function to hide the loading indicator
        function hideLoading() {
            const loadingDiv = document.getElementById('loadingIndicator');
            if (loadingDiv) {
                loadingDiv.remove();
            }
        }

        // Event listener for sending messages
        sendButton.addEventListener('click', sendMessage);
        chatInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                sendMessage();
            }
        });

        async function sendMessage() {
            const userMessage = chatInput.value.trim();
            if (userMessage === '') return;

            addMessage(userMessage, 'user');
            chatInput.value = '';
            sendButton.disabled = true; // Disable button while processing
            showLoading(); // Show loading indicator

            const lowerCaseMessage = userMessage.toLowerCase();

            // Custom response for specific questions
            if (lowerCaseMessage.includes('who created you') || lowerCaseMessage.includes('who invented you')) {
                setTimeout(() => {
                    hideLoading();
                    addMessage('I was created by STSV Team.', 'ai'); // Updated response
                    sendButton.disabled = false;
                }, 1000); // Simulate a short delay
                return;
            }

            try {
                let chatHistory = [];
                chatHistory.push({ role: "user", parts: [{ text: userMessage }] });

                const payload = { contents: chatHistory };
                const apiKey = ""; // Canvas will provide this if empty for gemini-2.0-flash
                const apiUrl = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=${apiKey}`;

                const response = await fetch(apiUrl, {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(payload)
                });

                if (!response.ok) {
                    const errorData = await response.json();
                    console.error('API Error:', errorData);
                    throw new Error(`API request failed with status ${response.status}: ${errorData.error.message || 'Unknown error'}`);
                }

                const result = await response.json();

                hideLoading(); // Hide loading indicator

                if (result.candidates && result.candidates.length > 0 &&
                    result.candidates[0].content && result.candidates[0].content.parts &&
                    result.candidates[0].content.parts.length > 0) {
                    const aiResponse = result.candidates[0].content.parts[0].text;
                    addMessage(aiResponse, 'ai');
                } else {
                    addMessage('Sorry, I could not generate a response. Please try again.', 'ai');
                    console.error('Unexpected API response structure:', result);
                }
            } catch (error) {
                hideLoading(); // Hide loading indicator
                addMessage('An error occurred while fetching the response. Please try again later.', 'ai');
                console.error('Error:', error);
            } finally {
                sendButton.disabled = false; // Re-enable button
            }
        }
    </script>
</body>
</html>
